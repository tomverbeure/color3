
bringup.elf:     file format elf32-littlenios2
bringup.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000fe8 memsz 0x00000fe8 flags r-x
    LOAD off    0x00002008 vaddr 0x00003008 paddr 0x0000300c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00002010 vaddr 0x00003010 paddr 0x00003010 align 2**12
         filesz 0x00000000 memsz 0x00000020 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000ee8  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  00002f08  00002f08  00001f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00003008  0000300c  00002008  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000020  00003010  00003010  00002010  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000208  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000415  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000015ad  00000000  00000000  00002655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a9f  00000000  00000000  00003c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000284f  00000000  00000000  000046a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004c4  00000000  00000000  00006ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000077d  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000c94  00000000  00000000  00007b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000087c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  000087d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000994f  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00009952  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000995e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000995f  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00009960  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0000996b  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00009976  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000007  00000000  00000000  00009981  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000029  00000000  00000000  00009988  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003ba54  00000000  00000000  000099b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002f08 l    d  .rodata	00000000 .rodata
00003008 l    d  .rwdata	00000000 .rwdata
00003010 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 i2c.c
00002104 l     F .text	0000002c i2c_set_sda
00002130 l     F .text	0000002c i2c_set_scl
00002250 l     F .text	00000018 i2c_get_sda
00003010 l     O .bss	00000004 b.1475
00000000 l    df *ABS*	00000000 sii9136.c
00000000 l    df *ABS*	00000000 sii9233.c
00000000 l    df *ABS*	00000000 alt_load.c
00002bfc l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00002c88 g     F .text	0000002c alt_main
0000300c g       *ABS*	00000000 __flash_rwdata_start
00002a54 g     F .text	0000006c sii9233_i2c_write_reg
000023d0 g     F .text	0000008c i2c_write_buf
00002e48 g     F .text	00000038 alt_putstr
00003014 g     O .bss	00000008 sii9136_i2c_ctx
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00003028 g     O .bss	00000004 alt_argv
0000b008 g       *ABS*	00000000 _gp
00002bc4 g     F .text	00000014 sii9233_i2c_read_reg
00002488 g     F .text	00000028 i2c_write_reg_nr
0000245c g     F .text	0000002c i2c_write_reg
000025c4 g     F .text	0000008c i2c_read_buf
0000279c g     F .text	00000094 sii9136_reset
00002844 g     F .text	000001e8 sii9136_init
00002730 g     F .text	0000006c sii9136_i2c_write_reg
00002bd8 g     F .text	00000024 sii9233_initialize
00003030 g       *ABS*	00000000 __bss_end
000026c0 g     F .text	00000070 i2c_read_reg
000021b0 g     F .text	00000064 i2c_start
00002ed8 g     F .text	00000004 alt_dcache_flush_all
000024b0 g     F .text	00000114 i2c_rx
0000300c g       *ABS*	00000000 __ram_rwdata_end
00003008 g       *ABS*	00000000 __ram_rodata_end
00003008 g     O .rwdata	00000004 jtag_uart_0
00002328 g     F .text	000000a8 i2c_write_regs
00003030 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000020e4 g     F .text	00000020 i2c_dly
00002ea4 g     F .text	00000034 altera_avalon_jtag_uart_write
00002cb4 g     F .text	00000144 alt_printf
00002020 g     F .text	0000003c _start
00002830 g     F .text	00000014 sii9136_i2c_read_reg
00002e80 g     F .text	00000004 alt_sys_init
00003008 g       *ABS*	00000000 __ram_rwdata_start
00002f08 g       *ABS*	00000000 __ram_rodata_start
00002a50 g     F .text	00000004 sii9233_init
00003030 g       *ABS*	00000000 __alt_stack_base
00002ac0 g     F .text	00000064 sii9233_dev_id
0000215c g     F .text	00000054 i2c_stop
0000301c g     O .bss	00000008 sii9233_i2c_ctx
00003010 g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000088 main
0000302c g     O .bss	00000004 alt_envp
00002268 g     F .text	000000c0 i2c_tx
00002f08 g       *ABS*	00000000 __flash_rodata_start
00002e84 g     F .text	00000020 alt_irq_init
00003024 g     O .bss	00000004 alt_argc
00002214 g     F .text	0000003c i2c_init
00002020 g       *ABS*	00000000 __ram_exceptions_start
0000300c g       *ABS*	00000000 _edata
00003030 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002ee0 g     F .text	00000008 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002a2c g     F .text	00000024 sii9136_initialize
00002650 g     F .text	00000070 i2c_read_regs
00002ee8 g     F .text	00000020 strlen
00002df8 g     F .text	00000050 alt_putchar
00002edc g     F .text	00000004 alt_icache_flush_all
00002000 g       *ABS*	00000000 __alt_mem_cpu_mem
00002b24 g     F .text	000000a0 sii9233_reset
00002c1c g     F .text	0000006c alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6ac0214 	ori	gp,gp,45064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108c0414 	ori	r2,r2,12304

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18cc0c14 	ori	r3,r3,12336

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	0002c1c0 	call	2c1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	0002c880 	call	2c88 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <main>:

#include "sii9136.h"
#include "sii9233.h"

int main()
{ 
    205c:	deffff04 	addi	sp,sp,-4
	alt_putstr("\nHello from Nios II!\n");
    2060:	01000034 	movhi	r4,0
    2064:	210bc204 	addi	r4,r4,12040

#include "sii9136.h"
#include "sii9233.h"

int main()
{ 
    2068:	dfc00015 	stw	ra,0(sp)
	alt_putstr("\nHello from Nios II!\n");
    206c:	0002e480 	call	2e48 <alt_putstr>

	sii9136_initialize();
    2070:	0002a2c0 	call	2a2c <sii9136_initialize>
	sii9233_initialize();
    2074:	0002bd80 	call	2bd8 <sii9233_initialize>

    sii9233_reset();
    2078:	0002b240 	call	2b24 <sii9233_reset>
    sii9233_init();
    207c:	0002a500 	call	2a50 <sii9233_init>
	
	sii9136_reset();
    2080:	000279c0 	call	279c <sii9136_reset>
	sii9136_init();
    2084:	00028440 	call	2844 <sii9136_init>
    2088:	00001406 	br	20dc <main+0x80>
	
	int i;
	/* Event loop never exits. */
	while (1){
		for(i=0;i<500000;++i){
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
    208c:	00c00044 	movi	r3,1
    2090:	00940c04 	movi	r2,20528
    2094:	10c00035 	stwio	r3,0(r2)

	
	int i;
	/* Event loop never exits. */
	while (1){
		for(i=0;i<500000;++i){
    2098:	20c9883a 	add	r4,r4,r3
    209c:	00800234 	movhi	r2,8
    20a0:	10a847c4 	addi	r2,r2,-24289
    20a4:	113ff90e 	bge	r2,r4,208c <main+0x30>
    20a8:	0005883a 	mov	r2,zero
    20ac:	01540d04 	movi	r5,20532
    20b0:	01000044 	movi	r4,1
    20b4:	00c00234 	movhi	r3,8
    20b8:	18e84804 	addi	r3,r3,-24288
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
		}
		for(i=0;i<500000;++i){
			IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 0x01);
    20bc:	29000035 	stwio	r4,0(r5)
	/* Event loop never exits. */
	while (1){
		for(i=0;i<500000;++i){
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
		}
		for(i=0;i<500000;++i){
    20c0:	10800044 	addi	r2,r2,1
    20c4:	10fffd1e 	bne	r2,r3,20bc <main+0x60>
			IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 0x01);
		}
		alt_printf("%x\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE));
    20c8:	00940804 	movi	r2,20512
    20cc:	11400037 	ldwio	r5,0(r2)
    20d0:	01000034 	movhi	r4,0
    20d4:	210c0104 	addi	r4,r4,12292
    20d8:	0002cb40 	call	2cb4 <alt_printf>
    20dc:	0009883a 	mov	r4,zero
    20e0:	003fee06 	br	209c <main+0x40>

000020e4 <i2c_dly>:
	i2c_set_scl(ctx, 1);
}


void i2c_dly()
{
    20e4:	0005883a 	mov	r2,zero
    20e8:	01540c04 	movi	r5,20528
    20ec:	01000044 	movi	r4,1
    20f0:	00c000c4 	movi	r3,3
	int i;
	for(i=0;i<3;++i){
		IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
    20f4:	29000035 	stwio	r4,0(r5)


void i2c_dly()
{
	int i;
	for(i=0;i<3;++i){
    20f8:	10800044 	addi	r2,r2,1
    20fc:	10fffd1e 	bne	r2,r3,20f4 <i2c_dly+0x10>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
	}
}
    2100:	f800283a 	ret

00002104 <i2c_set_sda>:
	else
		IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(ctx->base_addr, 1 << ctx->scl_pin_nr);
}

static void i2c_set_sda(i2c_ctx_t *ctx, int bit)
{
    2104:	20c00143 	ldbu	r3,5(r4)
    2108:	21000017 	ldw	r4,0(r4)
	if (bit)
    210c:	28000426 	beq	r5,zero,2120 <i2c_set_sda+0x1c>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(ctx->base_addr, 1 << ctx->sda_pin_nr);
    2110:	00800044 	movi	r2,1
    2114:	10c4983a 	sll	r2,r2,r3
    2118:	20800435 	stwio	r2,16(r4)
    211c:	f800283a 	ret
	else
		IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(ctx->base_addr, 1 << ctx->sda_pin_nr);
    2120:	00800044 	movi	r2,1
    2124:	10c4983a 	sll	r2,r2,r3
    2128:	20800535 	stwio	r2,20(r4)
    212c:	f800283a 	ret

00002130 <i2c_set_scl>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

static void i2c_set_scl(i2c_ctx_t *ctx, int bit)
{
    2130:	20c00103 	ldbu	r3,4(r4)
    2134:	21000017 	ldw	r4,0(r4)
	if (bit)
    2138:	28000426 	beq	r5,zero,214c <i2c_set_scl+0x1c>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(ctx->base_addr, 1 << ctx->scl_pin_nr);
    213c:	00800044 	movi	r2,1
    2140:	10c4983a 	sll	r2,r2,r3
    2144:	20800435 	stwio	r2,16(r4)
    2148:	f800283a 	ret
	else
		IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(ctx->base_addr, 1 << ctx->scl_pin_nr);
    214c:	00800044 	movi	r2,1
    2150:	10c4983a 	sll	r2,r2,r3
    2154:	20800535 	stwio	r2,20(r4)
    2158:	f800283a 	ret

0000215c <i2c_stop>:
	i2c_set_scl(ctx, 0);
	i2c_dly();
}

void i2c_stop(i2c_ctx_t *ctx)
{
    215c:	defffd04 	addi	sp,sp,-12
	i2c_set_sda(ctx, 0);             // i2c stop bit sequence
    2160:	000b883a 	mov	r5,zero
	i2c_set_scl(ctx, 0);
	i2c_dly();
}

void i2c_stop(i2c_ctx_t *ctx)
{
    2164:	dfc00215 	stw	ra,8(sp)
    2168:	dc400115 	stw	r17,4(sp)
    216c:	dc000015 	stw	r16,0(sp)
    2170:	2023883a 	mov	r17,r4
	i2c_set_sda(ctx, 0);             // i2c stop bit sequence
	i2c_dly();
	i2c_set_scl(ctx, 1);
    2174:	04000044 	movi	r16,1
	i2c_dly();
}

void i2c_stop(i2c_ctx_t *ctx)
{
	i2c_set_sda(ctx, 0);             // i2c stop bit sequence
    2178:	00021040 	call	2104 <i2c_set_sda>
	i2c_dly();
    217c:	00020e40 	call	20e4 <i2c_dly>
	i2c_set_scl(ctx, 1);
    2180:	8809883a 	mov	r4,r17
    2184:	800b883a 	mov	r5,r16
    2188:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();
    218c:	00020e40 	call	20e4 <i2c_dly>
	i2c_set_sda(ctx, 1);
    2190:	8809883a 	mov	r4,r17
    2194:	800b883a 	mov	r5,r16
    2198:	00021040 	call	2104 <i2c_set_sda>
	i2c_dly();
}
    219c:	dfc00217 	ldw	ra,8(sp)
    21a0:	dc400117 	ldw	r17,4(sp)
    21a4:	dc000017 	ldw	r16,0(sp)
    21a8:	dec00304 	addi	sp,sp,12
	i2c_set_sda(ctx, 0);             // i2c stop bit sequence
	i2c_dly();
	i2c_set_scl(ctx, 1);
	i2c_dly();
	i2c_set_sda(ctx, 1);
	i2c_dly();
    21ac:	00020e41 	jmpi	20e4 <i2c_dly>

000021b0 <i2c_start>:
		IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
	}
}

void i2c_start(i2c_ctx_t *ctx)
{
    21b0:	defffd04 	addi	sp,sp,-12
    21b4:	dc400115 	stw	r17,4(sp)
	i2c_set_sda(ctx, 1);             // i2c start bit sequence
    21b8:	04400044 	movi	r17,1
    21bc:	880b883a 	mov	r5,r17
		IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x01);
	}
}

void i2c_start(i2c_ctx_t *ctx)
{
    21c0:	dfc00215 	stw	ra,8(sp)
    21c4:	dc000015 	stw	r16,0(sp)
    21c8:	2021883a 	mov	r16,r4
	i2c_set_sda(ctx, 1);             // i2c start bit sequence
    21cc:	00021040 	call	2104 <i2c_set_sda>
	i2c_dly();
    21d0:	00020e40 	call	20e4 <i2c_dly>
	i2c_set_scl(ctx, 1);
    21d4:	8009883a 	mov	r4,r16
    21d8:	880b883a 	mov	r5,r17
    21dc:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();
    21e0:	00020e40 	call	20e4 <i2c_dly>
	i2c_set_sda(ctx, 0);
    21e4:	8009883a 	mov	r4,r16
    21e8:	000b883a 	mov	r5,zero
    21ec:	00021040 	call	2104 <i2c_set_sda>
	i2c_dly();
    21f0:	00020e40 	call	20e4 <i2c_dly>
	i2c_set_scl(ctx, 0);
    21f4:	8009883a 	mov	r4,r16
    21f8:	000b883a 	mov	r5,zero
    21fc:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();
}
    2200:	dfc00217 	ldw	ra,8(sp)
    2204:	dc400117 	ldw	r17,4(sp)
    2208:	dc000017 	ldw	r16,0(sp)
    220c:	dec00304 	addi	sp,sp,12
	i2c_set_scl(ctx, 1);
	i2c_dly();
	i2c_set_sda(ctx, 0);
	i2c_dly();
	i2c_set_scl(ctx, 0);
	i2c_dly();
    2210:	00020e41 	jmpi	20e4 <i2c_dly>

00002214 <i2c_init>:
{
	return (IORD_ALTERA_AVALON_PIO_DATA(ctx->base_addr) >> ctx->sda_pin_nr) & 1;
}

void i2c_init(i2c_ctx_t *ctx)
{
    2214:	defffd04 	addi	sp,sp,-12
    2218:	dc400115 	stw	r17,4(sp)
	i2c_set_sda(ctx, 1);
    221c:	04400044 	movi	r17,1
{
	return (IORD_ALTERA_AVALON_PIO_DATA(ctx->base_addr) >> ctx->sda_pin_nr) & 1;
}

void i2c_init(i2c_ctx_t *ctx)
{
    2220:	dc000015 	stw	r16,0(sp)
	i2c_set_sda(ctx, 1);
    2224:	880b883a 	mov	r5,r17
{
	return (IORD_ALTERA_AVALON_PIO_DATA(ctx->base_addr) >> ctx->sda_pin_nr) & 1;
}

void i2c_init(i2c_ctx_t *ctx)
{
    2228:	2021883a 	mov	r16,r4
    222c:	dfc00215 	stw	ra,8(sp)
	i2c_set_sda(ctx, 1);
    2230:	00021040 	call	2104 <i2c_set_sda>
	i2c_set_scl(ctx, 1);
    2234:	8009883a 	mov	r4,r16
    2238:	880b883a 	mov	r5,r17
}
    223c:	dfc00217 	ldw	ra,8(sp)
    2240:	dc400117 	ldw	r17,4(sp)
    2244:	dc000017 	ldw	r16,0(sp)
    2248:	dec00304 	addi	sp,sp,12
}

void i2c_init(i2c_ctx_t *ctx)
{
	i2c_set_sda(ctx, 1);
	i2c_set_scl(ctx, 1);
    224c:	00021301 	jmpi	2130 <i2c_set_scl>

00002250 <i2c_get_sda>:
	return (IORD_ALTERA_AVALON_PIO_DATA(ctx->base_addr) >> ctx->scl_pin_nr) & 1;
}

static int i2c_get_sda(i2c_ctx_t *ctx)
{
	return (IORD_ALTERA_AVALON_PIO_DATA(ctx->base_addr) >> ctx->sda_pin_nr) & 1;
    2250:	20800017 	ldw	r2,0(r4)
    2254:	10800037 	ldwio	r2,0(r2)
    2258:	20c00143 	ldbu	r3,5(r4)
    225c:	10c5d83a 	sra	r2,r2,r3
}
    2260:	1080004c 	andi	r2,r2,1
    2264:	f800283a 	ret

00002268 <i2c_tx>:
	return d;
}

// return 1: ACK, 0: NACK
int i2c_tx(i2c_ctx_t *ctx, unsigned char d)
{
    2268:	defffc04 	addi	sp,sp,-16
    226c:	dc800215 	stw	r18,8(sp)
    2270:	dc400115 	stw	r17,4(sp)
    2274:	dc000015 	stw	r16,0(sp)
    2278:	dfc00315 	stw	ra,12(sp)
    227c:	2021883a 	mov	r16,r4
    2280:	2823883a 	mov	r17,r5
    2284:	04800204 	movi	r18,8
	char x;
	static int b;
	for(x=8; x; x--) {
		i2c_set_sda(ctx, (d & 0x80)>>7);
    2288:	8940200c 	andi	r5,r17,128
    228c:	280ad1fa 	srli	r5,r5,7
    2290:	8009883a 	mov	r4,r16
// return 1: ACK, 0: NACK
int i2c_tx(i2c_ctx_t *ctx, unsigned char d)
{
	char x;
	static int b;
	for(x=8; x; x--) {
    2294:	94bfffc4 	addi	r18,r18,-1
		i2c_set_sda(ctx, (d & 0x80)>>7);
    2298:	00021040 	call	2104 <i2c_set_sda>
		d <<= 1;

		i2c_set_scl(ctx, 1);
    229c:	01400044 	movi	r5,1
    22a0:	8009883a 	mov	r4,r16
    22a4:	00021300 	call	2130 <i2c_set_scl>
        i2c_dly();
    22a8:	00020e40 	call	20e4 <i2c_dly>
		i2c_set_scl(ctx, 0);
    22ac:	8009883a 	mov	r4,r16
    22b0:	000b883a 	mov	r5,zero
    22b4:	00021300 	call	2130 <i2c_set_scl>
        i2c_dly(); 
    22b8:	00020e40 	call	20e4 <i2c_dly>
// return 1: ACK, 0: NACK
int i2c_tx(i2c_ctx_t *ctx, unsigned char d)
{
	char x;
	static int b;
	for(x=8; x; x--) {
    22bc:	90803fcc 	andi	r2,r18,255
    22c0:	1080201c 	xori	r2,r2,128
    22c4:	10bfe004 	addi	r2,r2,-128
		i2c_set_sda(ctx, (d & 0x80)>>7);
		d <<= 1;
    22c8:	8c63883a 	add	r17,r17,r17
// return 1: ACK, 0: NACK
int i2c_tx(i2c_ctx_t *ctx, unsigned char d)
{
	char x;
	static int b;
	for(x=8; x; x--) {
    22cc:	103fee1e 	bne	r2,zero,2288 <i2c_tx+0x20>
		i2c_set_scl(ctx, 1);
        i2c_dly();
		i2c_set_scl(ctx, 0);
        i2c_dly(); 
	}
	i2c_set_sda(ctx, 1);
    22d0:	8009883a 	mov	r4,r16
    22d4:	01400044 	movi	r5,1
    22d8:	00021040 	call	2104 <i2c_set_sda>
	i2c_set_scl(ctx, 1);
    22dc:	8009883a 	mov	r4,r16
    22e0:	01400044 	movi	r5,1
    22e4:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();
    22e8:	00020e40 	call	20e4 <i2c_dly>

	b = !i2c_get_sda(ctx);          // possible ACK bit
    22ec:	8009883a 	mov	r4,r16
    22f0:	00022500 	call	2250 <i2c_get_sda>
    22f4:	1005003a 	cmpeq	r2,r2,zero

	i2c_set_scl(ctx, 0);
    22f8:	8009883a 	mov	r4,r16
    22fc:	000b883a 	mov	r5,zero
	}
	i2c_set_sda(ctx, 1);
	i2c_set_scl(ctx, 1);
	i2c_dly();

	b = !i2c_get_sda(ctx);          // possible ACK bit
    2300:	d0a00215 	stw	r2,-32760(gp)

	i2c_set_scl(ctx, 0);
    2304:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();
    2308:	00020e40 	call	20e4 <i2c_dly>

	return b;
}
    230c:	d0a00217 	ldw	r2,-32760(gp)
    2310:	dfc00317 	ldw	ra,12(sp)
    2314:	dc800217 	ldw	r18,8(sp)
    2318:	dc400117 	ldw	r17,4(sp)
    231c:	dc000017 	ldw	r16,0(sp)
    2320:	dec00404 	addi	sp,sp,16
    2324:	f800283a 	ret

00002328 <i2c_write_regs>:

	return i2c_write_buf(ctx, addr, data, 2);
}

int i2c_write_regs(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *values, int len)
{
    2328:	defffa04 	addi	sp,sp,-24
    232c:	dd000415 	stw	r20,16(sp)
    2330:	dcc00315 	stw	r19,12(sp)
    2334:	dc800215 	stw	r18,8(sp)
    2338:	dc400115 	stw	r17,4(sp)
    233c:	dc000015 	stw	r16,0(sp)
    2340:	2023883a 	mov	r17,r4
    2344:	2821883a 	mov	r16,r5
    2348:	dfc00515 	stw	ra,20(sp)
    234c:	3827883a 	mov	r19,r7
    2350:	3025883a 	mov	r18,r6
    2354:	dd000617 	ldw	r20,24(sp)
	int ack;

	i2c_start(ctx);
    2358:	00021b00 	call	21b0 <i2c_start>

	ack = i2c_tx(ctx, addr);
    235c:	81403fcc 	andi	r5,r16,255
    2360:	8809883a 	mov	r4,r17
    2364:	00022680 	call	2268 <i2c_tx>
	if (!ack)
    2368:	10001026 	beq	r2,zero,23ac <i2c_write_regs+0x84>
		return 0;

	ack = i2c_tx(ctx, reg_nr);
    236c:	91403fcc 	andi	r5,r18,255
    2370:	8809883a 	mov	r4,r17
    2374:	00022680 	call	2268 <i2c_tx>
	if (!ack)
    2378:	10000c26 	beq	r2,zero,23ac <i2c_write_regs+0x84>
    237c:	0021883a 	mov	r16,zero
    2380:	00000406 	br	2394 <i2c_write_regs+0x6c>
		return 0;

	int i;
	for(i=0;i<len;++i){
		ack = i2c_tx(ctx, values[i]);
    2384:	11400003 	ldbu	r5,0(r2)
	ack = i2c_tx(ctx, reg_nr);
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
    2388:	84000044 	addi	r16,r16,1
		ack = i2c_tx(ctx, values[i]);
    238c:	00022680 	call	2268 <i2c_tx>
		if (!ack)
    2390:	10000626 	beq	r2,zero,23ac <i2c_write_regs+0x84>
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
		ack = i2c_tx(ctx, values[i]);
    2394:	9c05883a 	add	r2,r19,r16
    2398:	8809883a 	mov	r4,r17
	ack = i2c_tx(ctx, reg_nr);
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
    239c:	853ff916 	blt	r16,r20,2384 <i2c_write_regs+0x5c>
		ack = i2c_tx(ctx, values[i]);
		if (!ack)
			return 0;
	}

	i2c_stop(ctx);
    23a0:	000215c0 	call	215c <i2c_stop>
    23a4:	00800044 	movi	r2,1
    23a8:	00000106 	br	23b0 <i2c_write_regs+0x88>

	return 1;
    23ac:	0005883a 	mov	r2,zero
}
    23b0:	dfc00517 	ldw	ra,20(sp)
    23b4:	dd000417 	ldw	r20,16(sp)
    23b8:	dcc00317 	ldw	r19,12(sp)
    23bc:	dc800217 	ldw	r18,8(sp)
    23c0:	dc400117 	ldw	r17,4(sp)
    23c4:	dc000017 	ldw	r16,0(sp)
    23c8:	dec00604 	addi	sp,sp,24
    23cc:	f800283a 	ret

000023d0 <i2c_write_buf>:

	return b;
}

int i2c_write_buf(i2c_ctx_t *ctx, byte addr, byte* data, int len)
{
    23d0:	defffb04 	addi	sp,sp,-20
    23d4:	dcc00315 	stw	r19,12(sp)
    23d8:	dc800215 	stw	r18,8(sp)
    23dc:	dc400115 	stw	r17,4(sp)
    23e0:	dc000015 	stw	r16,0(sp)
    23e4:	2023883a 	mov	r17,r4
    23e8:	2821883a 	mov	r16,r5
    23ec:	dfc00415 	stw	ra,16(sp)
    23f0:	3027883a 	mov	r19,r6
    23f4:	3825883a 	mov	r18,r7
	int ack;

	i2c_start(ctx);
    23f8:	00021b00 	call	21b0 <i2c_start>
	ack = i2c_tx(ctx, addr);
    23fc:	81403fcc 	andi	r5,r16,255
    2400:	8809883a 	mov	r4,r17
    2404:	00022680 	call	2268 <i2c_tx>
	if (!ack)
    2408:	10000c26 	beq	r2,zero,243c <i2c_write_buf+0x6c>
    240c:	0021883a 	mov	r16,zero
    2410:	00000406 	br	2424 <i2c_write_buf+0x54>
		return 0;

	int i;
	for(i=0;i<len;++i){
		ack = i2c_tx(ctx, data[i]);
    2414:	11400003 	ldbu	r5,0(r2)
	ack = i2c_tx(ctx, addr);
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
    2418:	84000044 	addi	r16,r16,1
		ack = i2c_tx(ctx, data[i]);
    241c:	00022680 	call	2268 <i2c_tx>
		if (!ack)
    2420:	10000626 	beq	r2,zero,243c <i2c_write_buf+0x6c>
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
		ack = i2c_tx(ctx, data[i]);
    2424:	9c05883a 	add	r2,r19,r16
    2428:	8809883a 	mov	r4,r17
	ack = i2c_tx(ctx, addr);
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
    242c:	84bff916 	blt	r16,r18,2414 <i2c_write_buf+0x44>
		ack = i2c_tx(ctx, data[i]);
		if (!ack)
			return 0;
	}

	i2c_stop(ctx);
    2430:	000215c0 	call	215c <i2c_stop>
    2434:	00800044 	movi	r2,1
    2438:	00000106 	br	2440 <i2c_write_buf+0x70>

	return 1;
    243c:	0005883a 	mov	r2,zero
}
    2440:	dfc00417 	ldw	ra,16(sp)
    2444:	dcc00317 	ldw	r19,12(sp)
    2448:	dc800217 	ldw	r18,8(sp)
    244c:	dc400117 	ldw	r17,4(sp)
    2450:	dc000017 	ldw	r16,0(sp)
    2454:	dec00504 	addi	sp,sp,20
    2458:	f800283a 	ret

0000245c <i2c_write_reg>:
{
	return i2c_write_buf(ctx, addr, &reg_nr, 1);
}

int i2c_write_reg(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte value)
{
    245c:	defffe04 	addi	sp,sp,-8
	byte data[2] = { reg_nr, value };
    2460:	d9800005 	stb	r6,0(sp)
    2464:	d9c00045 	stb	r7,1(sp)

	return i2c_write_buf(ctx, addr, data, 2);
    2468:	29403fcc 	andi	r5,r5,255
    246c:	d80d883a 	mov	r6,sp
    2470:	01c00084 	movi	r7,2
{
	return i2c_write_buf(ctx, addr, &reg_nr, 1);
}

int i2c_write_reg(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte value)
{
    2474:	dfc00115 	stw	ra,4(sp)
	byte data[2] = { reg_nr, value };

	return i2c_write_buf(ctx, addr, data, 2);
    2478:	00023d00 	call	23d0 <i2c_write_buf>
}
    247c:	dfc00117 	ldw	ra,4(sp)
    2480:	dec00204 	addi	sp,sp,8
    2484:	f800283a 	ret

00002488 <i2c_write_reg_nr>:

	return 1;
}

int i2c_write_reg_nr(i2c_ctx_t *ctx, byte addr, byte reg_nr)
{
    2488:	defffe04 	addi	sp,sp,-8
    248c:	d9800005 	stb	r6,0(sp)
	return i2c_write_buf(ctx, addr, &reg_nr, 1);
    2490:	29403fcc 	andi	r5,r5,255
    2494:	d80d883a 	mov	r6,sp
    2498:	01c00044 	movi	r7,1

	return 1;
}

int i2c_write_reg_nr(i2c_ctx_t *ctx, byte addr, byte reg_nr)
{
    249c:	dfc00115 	stw	ra,4(sp)
	return i2c_write_buf(ctx, addr, &reg_nr, 1);
    24a0:	00023d00 	call	23d0 <i2c_write_buf>
}
    24a4:	dfc00117 	ldw	ra,4(sp)
    24a8:	dec00204 	addi	sp,sp,8
    24ac:	f800283a 	ret

000024b0 <i2c_rx>:
	i2c_set_sda(ctx, 1);
	i2c_dly();
}

unsigned char i2c_rx(i2c_ctx_t *ctx, char ack)
{
    24b0:	defffb04 	addi	sp,sp,-20
    24b4:	dcc00315 	stw	r19,12(sp)
    24b8:	2827883a 	mov	r19,r5
	char x, d=0;
	i2c_set_sda(ctx, 1); 
    24bc:	01400044 	movi	r5,1
	i2c_set_sda(ctx, 1);
	i2c_dly();
}

unsigned char i2c_rx(i2c_ctx_t *ctx, char ack)
{
    24c0:	dc800215 	stw	r18,8(sp)
    24c4:	dc400115 	stw	r17,4(sp)
    24c8:	dc000015 	stw	r16,0(sp)
    24cc:	dfc00415 	stw	ra,16(sp)
    24d0:	2021883a 	mov	r16,r4
	char x, d=0;
	i2c_set_sda(ctx, 1); 
    24d4:	0023883a 	mov	r17,zero
    24d8:	00021040 	call	2104 <i2c_set_sda>
    24dc:	0025883a 	mov	r18,zero

	for(x=0; x<8; x++) {
		d <<= 1;

		i2c_set_scl(ctx, 1);
    24e0:	8009883a 	mov	r4,r16
    24e4:	01400044 	movi	r5,1
    24e8:	00021300 	call	2130 <i2c_set_scl>
   	    i2c_dly();
    24ec:	00020e40 	call	20e4 <i2c_dly>
    24f0:	81000017 	ldw	r4,0(r16)
    24f4:	80c00103 	ldbu	r3,4(r16)
}


static int i2c_get_scl(i2c_ctx_t *ctx)
{
	return (IORD_ALTERA_AVALON_PIO_DATA(ctx->base_addr) >> ctx->scl_pin_nr) & 1;
    24f8:	20800037 	ldwio	r2,0(r4)
		d <<= 1;

		i2c_set_scl(ctx, 1);
   	    i2c_dly();
		// wait for any i2c_set_scl clock stretching
   		while(i2c_get_scl(ctx)==0);    
    24fc:	10c5d83a 	sra	r2,r2,r3
    2500:	1080004c 	andi	r2,r2,1
    2504:	1005003a 	cmpeq	r2,r2,zero
    2508:	103ffb1e 	bne	r2,zero,24f8 <i2c_rx+0x48>

		d |= i2c_get_sda(ctx);
    250c:	8009883a 	mov	r4,r16
    2510:	00022500 	call	2250 <i2c_get_sda>
{
	char x, d=0;
	i2c_set_sda(ctx, 1); 

	for(x=0; x<8; x++) {
		d <<= 1;
    2514:	90c03fcc 	andi	r3,r18,255
    2518:	18c0201c 	xori	r3,r3,128
    251c:	18ffe004 	addi	r3,r3,-128
    2520:	18c7883a 	add	r3,r3,r3
   	    i2c_dly();
		// wait for any i2c_set_scl clock stretching
   		while(i2c_get_scl(ctx)==0);    

		d |= i2c_get_sda(ctx);
   		i2c_set_scl(ctx, 0);
    2524:	8009883a 	mov	r4,r16
    2528:	000b883a 	mov	r5,zero
		i2c_set_scl(ctx, 1);
   	    i2c_dly();
		// wait for any i2c_set_scl clock stretching
   		while(i2c_get_scl(ctx)==0);    

		d |= i2c_get_sda(ctx);
    252c:	18a4b03a 	or	r18,r3,r2
unsigned char i2c_rx(i2c_ctx_t *ctx, char ack)
{
	char x, d=0;
	i2c_set_sda(ctx, 1); 

	for(x=0; x<8; x++) {
    2530:	8c400044 	addi	r17,r17,1
   	    i2c_dly();
		// wait for any i2c_set_scl clock stretching
   		while(i2c_get_scl(ctx)==0);    

		d |= i2c_get_sda(ctx);
   		i2c_set_scl(ctx, 0);
    2534:	00021300 	call	2130 <i2c_set_scl>
   	    i2c_dly();
    2538:	00020e40 	call	20e4 <i2c_dly>
unsigned char i2c_rx(i2c_ctx_t *ctx, char ack)
{
	char x, d=0;
	i2c_set_sda(ctx, 1); 

	for(x=0; x<8; x++) {
    253c:	88c03fcc 	andi	r3,r17,255
    2540:	18c0201c 	xori	r3,r3,128
    2544:	18ffe004 	addi	r3,r3,-128
    2548:	00800204 	movi	r2,8
    254c:	18bfe41e 	bne	r3,r2,24e0 <i2c_rx+0x30>

		d |= i2c_get_sda(ctx);
   		i2c_set_scl(ctx, 0);
   	    i2c_dly();
	} 
	if(ack) 
    2550:	98803fcc 	andi	r2,r19,255
    2554:	1080201c 	xori	r2,r2,128
    2558:	10bfe004 	addi	r2,r2,-128
    255c:	10000326 	beq	r2,zero,256c <i2c_rx+0xbc>
		i2c_set_sda(ctx, 0);
    2560:	8009883a 	mov	r4,r16
    2564:	000b883a 	mov	r5,zero
    2568:	00000206 	br	2574 <i2c_rx+0xc4>
	else 
		i2c_set_sda(ctx, 1);
    256c:	8009883a 	mov	r4,r16
    2570:	01400044 	movi	r5,1
    2574:	00021040 	call	2104 <i2c_set_sda>

	i2c_set_scl(ctx, 1);
    2578:	8009883a 	mov	r4,r16
    257c:	01400044 	movi	r5,1
    2580:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();             // send (N)ACK bit
    2584:	00020e40 	call	20e4 <i2c_dly>

	i2c_set_scl(ctx, 0);
    2588:	8009883a 	mov	r4,r16
    258c:	000b883a 	mov	r5,zero
    2590:	00021300 	call	2130 <i2c_set_scl>
	i2c_dly();             // send (N)ACK bit
    2594:	00020e40 	call	20e4 <i2c_dly>

	i2c_set_sda(ctx, 1);
    2598:	8009883a 	mov	r4,r16
    259c:	01400044 	movi	r5,1
    25a0:	00021040 	call	2104 <i2c_set_sda>
	return d;
}
    25a4:	90803fcc 	andi	r2,r18,255
    25a8:	dfc00417 	ldw	ra,16(sp)
    25ac:	dcc00317 	ldw	r19,12(sp)
    25b0:	dc800217 	ldw	r18,8(sp)
    25b4:	dc400117 	ldw	r17,4(sp)
    25b8:	dc000017 	ldw	r16,0(sp)
    25bc:	dec00504 	addi	sp,sp,20
    25c0:	f800283a 	ret

000025c4 <i2c_read_buf>:

	return 1;
}

int i2c_read_buf(i2c_ctx_t *ctx, byte addr, byte *data, int len)
{
    25c4:	defffb04 	addi	sp,sp,-20
    25c8:	dc000015 	stw	r16,0(sp)
    25cc:	2821883a 	mov	r16,r5
    25d0:	dcc00315 	stw	r19,12(sp)
    25d4:	dc800215 	stw	r18,8(sp)
    25d8:	dc400115 	stw	r17,4(sp)
    25dc:	dfc00415 	stw	ra,16(sp)
    25e0:	2023883a 	mov	r17,r4
    25e4:	3027883a 	mov	r19,r6
    25e8:	3825883a 	mov	r18,r7
	int ack;

	i2c_start(ctx);            

	ack = i2c_tx(ctx, addr | 1);          
    25ec:	84000054 	ori	r16,r16,1

int i2c_read_buf(i2c_ctx_t *ctx, byte addr, byte *data, int len)
{
	int ack;

	i2c_start(ctx);            
    25f0:	00021b00 	call	21b0 <i2c_start>

	ack = i2c_tx(ctx, addr | 1);          
    25f4:	81403fcc 	andi	r5,r16,255
    25f8:	8809883a 	mov	r4,r17
    25fc:	00022680 	call	2268 <i2c_tx>
	if (!ack)
    2600:	10000c26 	beq	r2,zero,2634 <i2c_read_buf+0x70>
    2604:	0021883a 	mov	r16,zero
    2608:	00000406 	br	261c <i2c_read_buf+0x58>
		return 0;

	int i;
	for(i=0;i<len;++i){
		data[i] = i2c_rx(ctx, i!=len-1);
    260c:	00024b00 	call	24b0 <i2c_rx>
    2610:	9c07883a 	add	r3,r19,r16
    2614:	18800005 	stb	r2,0(r3)
	ack = i2c_tx(ctx, addr | 1);          
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
    2618:	84000044 	addi	r16,r16,1
		data[i] = i2c_rx(ctx, i!=len-1);
    261c:	917fffc4 	addi	r5,r18,-1
    2620:	814ac03a 	cmpne	r5,r16,r5
    2624:	8809883a 	mov	r4,r17
	ack = i2c_tx(ctx, addr | 1);          
	if (!ack)
		return 0;

	int i;
	for(i=0;i<len;++i){
    2628:	84bff816 	blt	r16,r18,260c <i2c_read_buf+0x48>
		data[i] = i2c_rx(ctx, i!=len-1);
	}
	i2c_stop(ctx);               
    262c:	000215c0 	call	215c <i2c_stop>
    2630:	00800044 	movi	r2,1

	return 1;
}
    2634:	dfc00417 	ldw	ra,16(sp)
    2638:	dcc00317 	ldw	r19,12(sp)
    263c:	dc800217 	ldw	r18,8(sp)
    2640:	dc400117 	ldw	r17,4(sp)
    2644:	dc000017 	ldw	r16,0(sp)
    2648:	dec00504 	addi	sp,sp,20
    264c:	f800283a 	ret

00002650 <i2c_read_regs>:

	return 1;
}

int i2c_read_regs(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *values, int len)
{
    2650:	defffb04 	addi	sp,sp,-20
    2654:	dc000115 	stw	r16,4(sp)
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
    2658:	2c003fcc 	andi	r16,r5,255

	return 1;
}

int i2c_read_regs(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *values, int len)
{
    265c:	dc800315 	stw	r18,12(sp)
    2660:	d9800005 	stb	r6,0(sp)
    2664:	3825883a 	mov	r18,r7
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
    2668:	800b883a 	mov	r5,r16
    266c:	d80d883a 	mov	r6,sp
    2670:	01c00044 	movi	r7,1

	return 1;
}

int i2c_read_regs(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *values, int len)
{
    2674:	dc400215 	stw	r17,8(sp)
    2678:	dfc00415 	stw	ra,16(sp)
    267c:	2023883a 	mov	r17,r4
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
    2680:	00023d00 	call	23d0 <i2c_write_buf>
	if (!result)
    2684:	0007883a 	mov	r3,zero
		return 0;

	result = i2c_read_buf(ctx, addr, values, len);
    2688:	8809883a 	mov	r4,r17
    268c:	800b883a 	mov	r5,r16
    2690:	900d883a 	mov	r6,r18
    2694:	d9c00517 	ldw	r7,20(sp)
{
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
	if (!result)
    2698:	10000226 	beq	r2,zero,26a4 <i2c_read_regs+0x54>
		return 0;

	result = i2c_read_buf(ctx, addr, values, len);
    269c:	00025c40 	call	25c4 <i2c_read_buf>
    26a0:	1006c03a 	cmpne	r3,r2,zero
	if (!result)
		return 0;

	return 1;
}
    26a4:	1805883a 	mov	r2,r3
    26a8:	dfc00417 	ldw	ra,16(sp)
    26ac:	dc800317 	ldw	r18,12(sp)
    26b0:	dc400217 	ldw	r17,8(sp)
    26b4:	dc000117 	ldw	r16,4(sp)
    26b8:	dec00504 	addi	sp,sp,20
    26bc:	f800283a 	ret

000026c0 <i2c_read_reg>:
	return 1;
}


int i2c_read_reg(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *value)
{
    26c0:	defffb04 	addi	sp,sp,-20
    26c4:	dc000115 	stw	r16,4(sp)
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
    26c8:	2c003fcc 	andi	r16,r5,255
	return 1;
}


int i2c_read_reg(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *value)
{
    26cc:	dc800315 	stw	r18,12(sp)
    26d0:	d9800005 	stb	r6,0(sp)
    26d4:	3825883a 	mov	r18,r7
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
    26d8:	800b883a 	mov	r5,r16
    26dc:	d80d883a 	mov	r6,sp
    26e0:	01c00044 	movi	r7,1
	return 1;
}


int i2c_read_reg(i2c_ctx_t *ctx, byte addr, byte reg_nr, byte *value)
{
    26e4:	dc400215 	stw	r17,8(sp)
    26e8:	dfc00415 	stw	ra,16(sp)
    26ec:	2023883a 	mov	r17,r4
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
    26f0:	00023d00 	call	23d0 <i2c_write_buf>
	if (!result)
    26f4:	0007883a 	mov	r3,zero
		return 0;

	result = i2c_read_buf(ctx, addr, value, 1);
    26f8:	8809883a 	mov	r4,r17
    26fc:	800b883a 	mov	r5,r16
    2700:	900d883a 	mov	r6,r18
    2704:	01c00044 	movi	r7,1
{
	int result;

	// Set address to read
	result = i2c_write_buf(ctx, addr, &reg_nr, 1);
	if (!result)
    2708:	10000226 	beq	r2,zero,2714 <i2c_read_reg+0x54>
		return 0;

	result = i2c_read_buf(ctx, addr, value, 1);
    270c:	00025c40 	call	25c4 <i2c_read_buf>
    2710:	1006c03a 	cmpne	r3,r2,zero
	if (!result)
		return 0;

	return 1;
}
    2714:	1805883a 	mov	r2,r3
    2718:	dfc00417 	ldw	ra,16(sp)
    271c:	dc800317 	ldw	r18,12(sp)
    2720:	dc400217 	ldw	r17,8(sp)
    2724:	dc000117 	ldw	r16,4(sp)
    2728:	dec00504 	addi	sp,sp,20
    272c:	f800283a 	ret

00002730 <sii9136_i2c_write_reg>:

	i2c_init(&sii9136_i2c_ctx);
}

int sii9136_i2c_write_reg(byte reg_nr, byte value)
{
    2730:	defffc04 	addi	sp,sp,-16
    2734:	dc400115 	stw	r17,4(sp)
    2738:	dc000015 	stw	r16,0(sp)
	int result = i2c_write_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, reg_nr, value);
    273c:	2c403fcc 	andi	r17,r5,255
    2740:	24003fcc 	andi	r16,r4,255
    2744:	01401c84 	movi	r5,114
    2748:	d1200304 	addi	r4,gp,-32756
    274c:	800d883a 	mov	r6,r16
    2750:	880f883a 	mov	r7,r17

	i2c_init(&sii9136_i2c_ctx);
}

int sii9136_i2c_write_reg(byte reg_nr, byte value)
{
    2754:	dc800215 	stw	r18,8(sp)
    2758:	dfc00315 	stw	ra,12(sp)
	int result = i2c_write_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, reg_nr, value);
    275c:	000245c0 	call	245c <i2c_write_reg>
    2760:	1025883a 	mov	r18,r2

	if (!result)
		alt_printf("SII9136 reg write fail: %x, %x = %x\n", SII9136_I2C_ADDR_TPI, reg_nr, value);
    2764:	800d883a 	mov	r6,r16
    2768:	880f883a 	mov	r7,r17
    276c:	01000034 	movhi	r4,0
    2770:	210bc804 	addi	r4,r4,12064
    2774:	01401c84 	movi	r5,114

int sii9136_i2c_write_reg(byte reg_nr, byte value)
{
	int result = i2c_write_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, reg_nr, value);

	if (!result)
    2778:	1000011e 	bne	r2,zero,2780 <sii9136_i2c_write_reg+0x50>
		alt_printf("SII9136 reg write fail: %x, %x = %x\n", SII9136_I2C_ADDR_TPI, reg_nr, value);
    277c:	0002cb40 	call	2cb4 <alt_printf>

	return result;
}
    2780:	9005883a 	mov	r2,r18
    2784:	dfc00317 	ldw	ra,12(sp)
    2788:	dc800217 	ldw	r18,8(sp)
    278c:	dc400117 	ldw	r17,4(sp)
    2790:	dc000017 	ldw	r16,0(sp)
    2794:	dec00404 	addi	sp,sp,16
    2798:	f800283a 	ret

0000279c <sii9136_reset>:
{
	return i2c_read_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, reg_nr, value);
}

void sii9136_reset()
{
    279c:	defffc04 	addi	sp,sp,-16
    27a0:	dc000215 	stw	r16,8(sp)
	int result; 

	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 0x20);
    27a4:	00940d04 	movi	r2,20532
    27a8:	04000804 	movi	r16,32
{
	return i2c_read_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, reg_nr, value);
}

void sii9136_reset()
{
    27ac:	dfc00315 	stw	ra,12(sp)
	int result; 

	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 0x20);
    27b0:	14000035 	stwio	r16,0(r2)
	i2c_dly();
    27b4:	00020e40 	call	20e4 <i2c_dly>
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x20);
    27b8:	00940c04 	movi	r2,20528
    27bc:	14000035 	stwio	r16,0(r2)

	result = i2c_write_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, 0xC7, 0x00);
    27c0:	d1200304 	addi	r4,gp,-32756
    27c4:	01401c84 	movi	r5,114
    27c8:	018031c4 	movi	r6,199
    27cc:	000f883a 	mov	r7,zero
    27d0:	000245c0 	call	245c <i2c_write_reg>
	if (!result){
		alt_printf("Error TPI Mode Enable\n");
    27d4:	01000034 	movhi	r4,0
    27d8:	210bd204 	addi	r4,r4,12104
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 0x20);
	i2c_dly();
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 0x20);

	result = i2c_write_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, 0xC7, 0x00);
	if (!result){
    27dc:	10000226 	beq	r2,zero,27e8 <sii9136_reset+0x4c>
		alt_printf("Error TPI Mode Enable\n");
	}
	else{
		alt_printf("TPI Mode Enable Ok\n");
    27e0:	01000034 	movhi	r4,0
    27e4:	210bd804 	addi	r4,r4,12128
    27e8:	0002cb40 	call	2cb4 <alt_printf>
	}

	unsigned char id[3];
	i2c_read_regs(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, 0x1b, id, 3);
    27ec:	d9c00104 	addi	r7,sp,4
    27f0:	d1200304 	addi	r4,gp,-32756
    27f4:	01401c84 	movi	r5,114
    27f8:	018006c4 	movi	r6,27
    27fc:	008000c4 	movi	r2,3
    2800:	d8800015 	stw	r2,0(sp)
    2804:	00026500 	call	2650 <i2c_read_regs>
	alt_printf("Device ID: %x %x %x\n", id[0], id[1], id[2]);
    2808:	d9400103 	ldbu	r5,4(sp)
    280c:	d9800143 	ldbu	r6,5(sp)
    2810:	d9c00183 	ldbu	r7,6(sp)
    2814:	01000034 	movhi	r4,0
    2818:	210bdd04 	addi	r4,r4,12148
    281c:	0002cb40 	call	2cb4 <alt_printf>
}
    2820:	dfc00317 	ldw	ra,12(sp)
    2824:	dc000217 	ldw	r16,8(sp)
    2828:	dec00404 	addi	sp,sp,16
    282c:	f800283a 	ret

00002830 <sii9136_i2c_read_reg>:

	return result;
}

int sii9136_i2c_read_reg(byte reg_nr, byte *value)
{
    2830:	280f883a 	mov	r7,r5
	return i2c_read_reg(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, reg_nr, value);
    2834:	21803fcc 	andi	r6,r4,255
    2838:	01401c84 	movi	r5,114
    283c:	d1200304 	addi	r4,gp,-32756
    2840:	00026c01 	jmpi	26c0 <i2c_read_reg>

00002844 <sii9136_init>:
	i2c_read_regs(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, 0x1b, id, 3);
	alt_printf("Device ID: %x %x %x\n", id[0], id[1], id[2]);
}

void sii9136_init()
{
    2844:	defff504 	addi	sp,sp,-44
    2848:	dc400215 	stw	r17,8(sp)
	alt_u8 status;

	sii9136_i2c_write_reg(0x1A, 0x11);		// disable TMDS output
    284c:	01000684 	movi	r4,26

	sii9136_i2c_write_reg(0x09, 0x00);		// input 8-bit RGB mode
    2850:	04400244 	movi	r17,9

void sii9136_init()
{
	alt_u8 status;

	sii9136_i2c_write_reg(0x1A, 0x11);		// disable TMDS output
    2854:	01400444 	movi	r5,17
	i2c_read_regs(&sii9136_i2c_ctx, SII9136_I2C_ADDR_TPI, 0x1b, id, 3);
	alt_printf("Device ID: %x %x %x\n", id[0], id[1], id[2]);
}

void sii9136_init()
{
    2858:	dfc00a15 	stw	ra,40(sp)
    285c:	df000915 	stw	fp,36(sp)
    2860:	ddc00815 	stw	r23,32(sp)
    2864:	dd800715 	stw	r22,28(sp)
    2868:	dd400615 	stw	r21,24(sp)
    286c:	dd000515 	stw	r20,20(sp)
    2870:	dcc00415 	stw	r19,16(sp)
    2874:	dc800315 	stw	r18,12(sp)
    2878:	dc000115 	stw	r16,4(sp)
	alt_u8 status;

	sii9136_i2c_write_reg(0x1A, 0x11);		// disable TMDS output
    287c:	00027300 	call	2730 <sii9136_i2c_write_reg>

	sii9136_i2c_write_reg(0x09, 0x00);		// input 8-bit RGB mode
    2880:	8809883a 	mov	r4,r17
    2884:	000b883a 	mov	r5,zero
    2888:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x1E, 0x00);		// Power up transmitter----Enter full-operation D0 state


	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
    288c:	04000104 	movi	r16,4
	alt_u8 status;

	sii9136_i2c_write_reg(0x1A, 0x11);		// disable TMDS output

	sii9136_i2c_write_reg(0x09, 0x00);		// input 8-bit RGB mode
	sii9136_i2c_write_reg(0x1E, 0x00);		// Power up transmitter----Enter full-operation D0 state
    2890:	01000784 	movi	r4,30
    2894:	000b883a 	mov	r5,zero
    2898:	00027300 	call	2730 <sii9136_i2c_write_reg>


	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
    289c:	8809883a 	mov	r4,r17
    28a0:	800b883a 	mov	r5,r16
    28a4:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x0A, 0x04);		// output 12-bit RGB

	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
    28a8:	04c00044 	movi	r19,1
	sii9136_i2c_write_reg(0x09, 0x00);		// input 8-bit RGB mode
	sii9136_i2c_write_reg(0x1E, 0x00);		// Power up transmitter----Enter full-operation D0 state


	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
	sii9136_i2c_write_reg(0x0A, 0x04);		// output 12-bit RGB
    28ac:	800b883a 	mov	r5,r16

	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
    28b0:	05802f04 	movi	r22,188
	sii9136_i2c_write_reg(0x09, 0x00);		// input 8-bit RGB mode
	sii9136_i2c_write_reg(0x1E, 0x00);		// Power up transmitter----Enter full-operation D0 state


	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
	sii9136_i2c_write_reg(0x0A, 0x04);		// output 12-bit RGB
    28b4:	01000284 	movi	r4,10
    28b8:	00027300 	call	2730 <sii9136_i2c_write_reg>

	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
	sii9136_i2c_write_reg(0xBD, 0x80);
    28bc:	05c02f44 	movi	r23,189


	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
	sii9136_i2c_write_reg(0x0A, 0x04);		// output 12-bit RGB

	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
    28c0:	b009883a 	mov	r4,r22
    28c4:	980b883a 	mov	r5,r19
	sii9136_i2c_write_reg(0xBD, 0x80);
    28c8:	05402004 	movi	r21,128


	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
	sii9136_i2c_write_reg(0x0A, 0x04);		// output 12-bit RGB

	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
    28cc:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0xBD, 0x80);
	sii9136_i2c_write_reg(0xBE, 0x24);
    28d0:	04802f84 	movi	r18,190

	sii9136_i2c_write_reg(0x09, 0x04);		// input 12-bit RGB mode
	sii9136_i2c_write_reg(0x0A, 0x04);		// output 12-bit RGB

	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
	sii9136_i2c_write_reg(0xBD, 0x80);
    28d4:	b809883a 	mov	r4,r23
    28d8:	a80b883a 	mov	r5,r21
    28dc:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0xBE, 0x24);
    28e0:	9009883a 	mov	r4,r18
    28e4:	01400904 	movi	r5,36
    28e8:	00027300 	call	2730 <sii9136_i2c_write_reg>

	sii9136_i2c_write_reg(0x19, 0x01);
    28ec:	980b883a 	mov	r5,r19
    28f0:	01000644 	movi	r4,25
    28f4:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x3C, 0x00);		// disable Interrupt
	sii9136_i2c_write_reg(0x3D, 0xF3);		// clear Interrupt Status
    28f8:	07000f44 	movi	fp,61
	sii9136_i2c_write_reg(0xBC, 0x01);		// Set source termination
	sii9136_i2c_write_reg(0xBD, 0x80);
	sii9136_i2c_write_reg(0xBE, 0x24);

	sii9136_i2c_write_reg(0x19, 0x01);
	sii9136_i2c_write_reg(0x3C, 0x00);		// disable Interrupt
    28fc:	01000f04 	movi	r4,60
    2900:	000b883a 	mov	r5,zero
    2904:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x3D, 0xF3);		// clear Interrupt Status

	//audio config
	sii9136_i2c_write_reg(0x26, 0x91);
    2908:	05000984 	movi	r20,38
	sii9136_i2c_write_reg(0xBD, 0x80);
	sii9136_i2c_write_reg(0xBE, 0x24);

	sii9136_i2c_write_reg(0x19, 0x01);
	sii9136_i2c_write_reg(0x3C, 0x00);		// disable Interrupt
	sii9136_i2c_write_reg(0x3D, 0xF3);		// clear Interrupt Status
    290c:	e009883a 	mov	r4,fp

	//audio config
	sii9136_i2c_write_reg(0x26, 0x91);
    2910:	04402444 	movi	r17,145
	sii9136_i2c_write_reg(0xBD, 0x80);
	sii9136_i2c_write_reg(0xBE, 0x24);

	sii9136_i2c_write_reg(0x19, 0x01);
	sii9136_i2c_write_reg(0x3C, 0x00);		// disable Interrupt
	sii9136_i2c_write_reg(0x3D, 0xF3);		// clear Interrupt Status
    2914:	01403cc4 	movi	r5,243
    2918:	00027300 	call	2730 <sii9136_i2c_write_reg>

	//audio config
	sii9136_i2c_write_reg(0x26, 0x91);
    291c:	a009883a 	mov	r4,r20
    2920:	880b883a 	mov	r5,r17
    2924:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x25, 0x03);
    2928:	01000944 	movi	r4,37
    292c:	014000c4 	movi	r5,3
	sii9136_i2c_write_reg(0x27, 0x00);
	sii9136_i2c_write_reg(0x1f, 0x80);
    2930:	040007c4 	movi	r16,31
	sii9136_i2c_write_reg(0x3C, 0x00);		// disable Interrupt
	sii9136_i2c_write_reg(0x3D, 0xF3);		// clear Interrupt Status

	//audio config
	sii9136_i2c_write_reg(0x26, 0x91);
	sii9136_i2c_write_reg(0x25, 0x03);
    2934:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x27, 0x00);
    2938:	010009c4 	movi	r4,39
    293c:	000b883a 	mov	r5,zero
    2940:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x1f, 0x80);
    2944:	a80b883a 	mov	r5,r21
    2948:	8009883a 	mov	r4,r16
    294c:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x1f, 0x91);
    2950:	8009883a 	mov	r4,r16
    2954:	880b883a 	mov	r5,r17
    2958:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x1f, 0xa2);
    295c:	8009883a 	mov	r4,r16
    2960:	01402884 	movi	r5,162
    2964:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x1f, 0xb3);
    2968:	8009883a 	mov	r4,r16
    296c:	01402cc4 	movi	r5,179
    2970:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x20, 0xF0);
    2974:	01403c04 	movi	r5,240
    2978:	01000804 	movi	r4,32
    297c:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x26, 0x81);		// I2S
    2980:	a009883a 	mov	r4,r20
    2984:	01402044 	movi	r5,129
    2988:	00027300 	call	2730 <sii9136_i2c_write_reg>
	//audio config end

	sii9136_i2c_write_reg(0xBC, 0x02);
    298c:	b009883a 	mov	r4,r22
    2990:	01400084 	movi	r5,2
    2994:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0xBD, 0x1D);
    2998:	b809883a 	mov	r4,r23
    299c:	01400744 	movi	r5,29
    29a0:	00027300 	call	2730 <sii9136_i2c_write_reg>

	sii9136_i2c_read_reg(0xBE, &status);
    29a4:	9009883a 	mov	r4,r18
    29a8:	d80b883a 	mov	r5,sp
    29ac:	00028300 	call	2830 <sii9136_i2c_read_reg>
	status=status^0x10;
    29b0:	d8800003 	ldbu	r2,0(sp)
	sii9136_i2c_write_reg(0xBE, status);
    29b4:	9009883a 	mov	r4,r18

	sii9136_i2c_write_reg(0xBC, 0x02);
	sii9136_i2c_write_reg(0xBD, 0x1D);

	sii9136_i2c_read_reg(0xBE, &status);
	status=status^0x10;
    29b8:	1080041c 	xori	r2,r2,16
	sii9136_i2c_write_reg(0xBE, status);
    29bc:	11403fcc 	andi	r5,r2,255

	sii9136_i2c_write_reg(0xBC, 0x02);
	sii9136_i2c_write_reg(0xBD, 0x1D);

	sii9136_i2c_read_reg(0xBE, &status);
	status=status^0x10;
    29c0:	d8800005 	stb	r2,0(sp)
	sii9136_i2c_write_reg(0xBE, status);
    29c4:	00027300 	call	2730 <sii9136_i2c_write_reg>

	sii9136_i2c_write_reg(0x1A, 0x01);		// enable TMDS output
    29c8:	980b883a 	mov	r5,r19
    29cc:	01000684 	movi	r4,26
    29d0:	00027300 	call	2730 <sii9136_i2c_write_reg>
	sii9136_i2c_write_reg(0x3C, 0xFB);		// Interrupt Enable
    29d4:	01000f04 	movi	r4,60
    29d8:	01403ec4 	movi	r5,251
    29dc:	00027300 	call	2730 <sii9136_i2c_write_reg>

	sii9136_i2c_read_reg(0x3D, &status);
    29e0:	e009883a 	mov	r4,fp
    29e4:	d80b883a 	mov	r5,sp
    29e8:	00028300 	call	2830 <sii9136_i2c_read_reg>
	alt_printf("status=%x\n", status);
    29ec:	d9400003 	ldbu	r5,0(sp)
    29f0:	01000034 	movhi	r4,0
    29f4:	210be304 	addi	r4,r4,12172
    29f8:	0002cb40 	call	2cb4 <alt_printf>
}
    29fc:	dfc00a17 	ldw	ra,40(sp)
    2a00:	df000917 	ldw	fp,36(sp)
    2a04:	ddc00817 	ldw	r23,32(sp)
    2a08:	dd800717 	ldw	r22,28(sp)
    2a0c:	dd400617 	ldw	r21,24(sp)
    2a10:	dd000517 	ldw	r20,20(sp)
    2a14:	dcc00417 	ldw	r19,16(sp)
    2a18:	dc800317 	ldw	r18,12(sp)
    2a1c:	dc400217 	ldw	r17,8(sp)
    2a20:	dc000117 	ldw	r16,4(sp)
    2a24:	dec00b04 	addi	sp,sp,44
    2a28:	f800283a 	ret

00002a2c <sii9136_initialize>:

i2c_ctx_t sii9136_i2c_ctx;

void sii9136_initialize()
{
	sii9136_i2c_ctx.base_addr = PIO_0_BASE;
    2a2c:	00940804 	movi	r2,20512
    2a30:	d0e00304 	addi	r3,gp,-32756
    2a34:	d0a00315 	stw	r2,-32756(gp)
	sii9136_i2c_ctx.sda_pin_nr = 6;
    2a38:	00800184 	movi	r2,6
    2a3c:	18800145 	stb	r2,5(r3)
	sii9136_i2c_ctx.scl_pin_nr = 7;

	i2c_init(&sii9136_i2c_ctx);
    2a40:	1809883a 	mov	r4,r3

void sii9136_initialize()
{
	sii9136_i2c_ctx.base_addr = PIO_0_BASE;
	sii9136_i2c_ctx.sda_pin_nr = 6;
	sii9136_i2c_ctx.scl_pin_nr = 7;
    2a44:	008001c4 	movi	r2,7
    2a48:	18800105 	stb	r2,4(r3)

	i2c_init(&sii9136_i2c_ctx);
    2a4c:	00022141 	jmpi	2214 <i2c_init>

00002a50 <sii9233_init>:
	alt_printf("Device ID: %x, rev: %x\n", dev_id, rev);
}

void sii9233_init()
{
}
    2a50:	f800283a 	ret

00002a54 <sii9233_i2c_write_reg>:

	i2c_init(&sii9233_i2c_ctx);
}

int sii9233_i2c_write_reg(byte reg_nr, byte value)
{
    2a54:	defffc04 	addi	sp,sp,-16
    2a58:	dc400115 	stw	r17,4(sp)
    2a5c:	dc000015 	stw	r16,0(sp)
	int result = i2c_write_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, reg_nr, value);
    2a60:	2c403fcc 	andi	r17,r5,255
    2a64:	24003fcc 	andi	r16,r4,255
    2a68:	01401804 	movi	r5,96
    2a6c:	d1200504 	addi	r4,gp,-32748
    2a70:	800d883a 	mov	r6,r16
    2a74:	880f883a 	mov	r7,r17

	i2c_init(&sii9233_i2c_ctx);
}

int sii9233_i2c_write_reg(byte reg_nr, byte value)
{
    2a78:	dc800215 	stw	r18,8(sp)
    2a7c:	dfc00315 	stw	ra,12(sp)
	int result = i2c_write_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, reg_nr, value);
    2a80:	000245c0 	call	245c <i2c_write_reg>
    2a84:	1025883a 	mov	r18,r2

	if (!result)
		alt_printf("SII9233 reg write fail: %x, %x = %x\n", SII9233_I2C_ADDR_RPI, reg_nr, value);
    2a88:	800d883a 	mov	r6,r16
    2a8c:	880f883a 	mov	r7,r17
    2a90:	01000034 	movhi	r4,0
    2a94:	210be604 	addi	r4,r4,12184
    2a98:	01401804 	movi	r5,96

int sii9233_i2c_write_reg(byte reg_nr, byte value)
{
	int result = i2c_write_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, reg_nr, value);

	if (!result)
    2a9c:	1000011e 	bne	r2,zero,2aa4 <sii9233_i2c_write_reg+0x50>
		alt_printf("SII9233 reg write fail: %x, %x = %x\n", SII9233_I2C_ADDR_RPI, reg_nr, value);
    2aa0:	0002cb40 	call	2cb4 <alt_printf>

	return result;
}
    2aa4:	9005883a 	mov	r2,r18
    2aa8:	dfc00317 	ldw	ra,12(sp)
    2aac:	dc800217 	ldw	r18,8(sp)
    2ab0:	dc400117 	ldw	r17,4(sp)
    2ab4:	dc000017 	ldw	r16,0(sp)
    2ab8:	dec00404 	addi	sp,sp,16
    2abc:	f800283a 	ret

00002ac0 <sii9233_dev_id>:
{
	return i2c_read_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, reg_nr, value);
}

void sii9233_dev_id(unsigned int *dev_id, unsigned int *rev)
{
    2ac0:	defffb04 	addi	sp,sp,-20
    2ac4:	dc400315 	stw	r17,12(sp)
    2ac8:	dc000215 	stw	r16,8(sp)
    2acc:	2823883a 	mov	r17,r5
    2ad0:	2021883a 	mov	r16,r4
	unsigned char id[3];
	i2c_read_regs(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, SII9233_REG_DEV_ID, id, 3);
    2ad4:	01401804 	movi	r5,96
    2ad8:	d1200504 	addi	r4,gp,-32748
    2adc:	01800084 	movi	r6,2
    2ae0:	d9c00104 	addi	r7,sp,4
    2ae4:	008000c4 	movi	r2,3
{
	return i2c_read_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, reg_nr, value);
}

void sii9233_dev_id(unsigned int *dev_id, unsigned int *rev)
{
    2ae8:	dfc00415 	stw	ra,16(sp)
	unsigned char id[3];
	i2c_read_regs(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, SII9233_REG_DEV_ID, id, 3);
    2aec:	d8800015 	stw	r2,0(sp)
    2af0:	00026500 	call	2650 <i2c_read_regs>

	*dev_id = id[0] | (id[1]<<8);
    2af4:	d8800143 	ldbu	r2,5(sp)
    2af8:	d8c00103 	ldbu	r3,4(sp)
	*rev = id[2];
    2afc:	d9000183 	ldbu	r4,6(sp)
void sii9233_dev_id(unsigned int *dev_id, unsigned int *rev)
{
	unsigned char id[3];
	i2c_read_regs(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, SII9233_REG_DEV_ID, id, 3);

	*dev_id = id[0] | (id[1]<<8);
    2b00:	1004923a 	slli	r2,r2,8
    2b04:	1886b03a 	or	r3,r3,r2
    2b08:	80c00015 	stw	r3,0(r16)
	*rev = id[2];
    2b0c:	89000015 	stw	r4,0(r17)
}
    2b10:	dfc00417 	ldw	ra,16(sp)
    2b14:	dc400317 	ldw	r17,12(sp)
    2b18:	dc000217 	ldw	r16,8(sp)
    2b1c:	dec00504 	addi	sp,sp,20
    2b20:	f800283a 	ret

00002b24 <sii9233_reset>:

void sii9233_reset()
{
    2b24:	defffc04 	addi	sp,sp,-16
    2b28:	dc000215 	stw	r16,8(sp)
	// Toggle reset pin
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 1<<13);
    2b2c:	00940d04 	movi	r2,20532
    2b30:	04080004 	movi	r16,8192
	*dev_id = id[0] | (id[1]<<8);
	*rev = id[2];
}

void sii9233_reset()
{
    2b34:	dfc00315 	stw	ra,12(sp)
	// Toggle reset pin
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE, 1<<13);
    2b38:	14000035 	stwio	r16,0(r2)
	i2c_dly();
    2b3c:	00020e40 	call	20e4 <i2c_dly>
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE, 1<<13);
    2b40:	00940c04 	movi	r2,20528
    2b44:	14000035 	stwio	r16,0(r2)

	// I2C address-only transaction to check if there's an ACK.
	i2c_start(&sii9233_i2c_ctx);
    2b48:	d1200504 	addi	r4,gp,-32748
    2b4c:	00021b00 	call	21b0 <i2c_start>
	int ack = i2c_tx(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI);
    2b50:	01401804 	movi	r5,96
    2b54:	d1200504 	addi	r4,gp,-32748
    2b58:	00022680 	call	2268 <i2c_tx>
    2b5c:	1021883a 	mov	r16,r2
	i2c_stop(&sii9233_i2c_ctx);
    2b60:	d1200504 	addi	r4,gp,-32748
    2b64:	000215c0 	call	215c <i2c_stop>

	if (!ack){
		alt_printf("SII9233 not responding!\n");
    2b68:	01000034 	movhi	r4,0
    2b6c:	210bf004 	addi	r4,r4,12224
	// I2C address-only transaction to check if there's an ACK.
	i2c_start(&sii9233_i2c_ctx);
	int ack = i2c_tx(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI);
	i2c_stop(&sii9233_i2c_ctx);

	if (!ack){
    2b70:	80000226 	beq	r16,zero,2b7c <sii9233_reset+0x58>
		alt_printf("SII9233 not responding!\n");
	}
	else{
		alt_printf("SII9233 present!\n");
    2b74:	01000034 	movhi	r4,0
    2b78:	210bf704 	addi	r4,r4,12252
    2b7c:	0002cb40 	call	2cb4 <alt_printf>
	}

	// Soft reset
	i2c_write_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, SII9233_REG_SRST, SII9233_REG_SRST_SW_AUTO);
    2b80:	01c00404 	movi	r7,16
    2b84:	01800144 	movi	r6,5
    2b88:	01401804 	movi	r5,96
    2b8c:	d1200504 	addi	r4,gp,-32748
    2b90:	000245c0 	call	245c <i2c_write_reg>

	unsigned int dev_id, rev;
	sii9233_dev_id(&dev_id, &rev);
    2b94:	d809883a 	mov	r4,sp
    2b98:	d9400104 	addi	r5,sp,4
    2b9c:	0002ac00 	call	2ac0 <sii9233_dev_id>

	alt_printf("Device ID: %x, rev: %x\n", dev_id, rev);
    2ba0:	d9400017 	ldw	r5,0(sp)
    2ba4:	d9800117 	ldw	r6,4(sp)
    2ba8:	01000034 	movhi	r4,0
    2bac:	210bfc04 	addi	r4,r4,12272
    2bb0:	0002cb40 	call	2cb4 <alt_printf>
}
    2bb4:	dfc00317 	ldw	ra,12(sp)
    2bb8:	dc000217 	ldw	r16,8(sp)
    2bbc:	dec00404 	addi	sp,sp,16
    2bc0:	f800283a 	ret

00002bc4 <sii9233_i2c_read_reg>:

	return result;
}

int sii9233_i2c_read_reg(byte reg_nr, byte *value)
{
    2bc4:	280f883a 	mov	r7,r5
	return i2c_read_reg(&sii9233_i2c_ctx, SII9233_I2C_ADDR_RPI, reg_nr, value);
    2bc8:	21803fcc 	andi	r6,r4,255
    2bcc:	01401804 	movi	r5,96
    2bd0:	d1200504 	addi	r4,gp,-32748
    2bd4:	00026c01 	jmpi	26c0 <i2c_read_reg>

00002bd8 <sii9233_initialize>:

i2c_ctx_t sii9233_i2c_ctx;

void sii9233_initialize()
{
	sii9233_i2c_ctx.base_addr = PIO_0_BASE;
    2bd8:	00940804 	movi	r2,20512
    2bdc:	d0e00504 	addi	r3,gp,-32748
    2be0:	d0a00515 	stw	r2,-32748(gp)
	sii9233_i2c_ctx.sda_pin_nr = 14;
    2be4:	00800384 	movi	r2,14
    2be8:	18800145 	stb	r2,5(r3)
	sii9233_i2c_ctx.scl_pin_nr = 15;

	i2c_init(&sii9233_i2c_ctx);
    2bec:	1809883a 	mov	r4,r3

void sii9233_initialize()
{
	sii9233_i2c_ctx.base_addr = PIO_0_BASE;
	sii9233_i2c_ctx.sda_pin_nr = 14;
	sii9233_i2c_ctx.scl_pin_nr = 15;
    2bf0:	008003c4 	movi	r2,15
    2bf4:	18800105 	stb	r2,4(r3)

	i2c_init(&sii9233_i2c_ctx);
    2bf8:	00022141 	jmpi	2214 <i2c_init>

00002bfc <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2bfc:	2900051e 	bne	r5,r4,2c14 <alt_load_section+0x18>
    2c00:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    2c04:	20800017 	ldw	r2,0(r4)
    2c08:	21000104 	addi	r4,r4,4
    2c0c:	28800015 	stw	r2,0(r5)
    2c10:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2c14:	29bffb1e 	bne	r5,r6,2c04 <alt_load_section+0x8>
    2c18:	f800283a 	ret

00002c1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2c1c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2c20:	01000034 	movhi	r4,0
    2c24:	210c0304 	addi	r4,r4,12300
    2c28:	01400034 	movhi	r5,0
    2c2c:	294c0204 	addi	r5,r5,12296
    2c30:	01800034 	movhi	r6,0
    2c34:	318c0304 	addi	r6,r6,12300
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2c38:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2c3c:	0002bfc0 	call	2bfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2c40:	01000034 	movhi	r4,0
    2c44:	21080804 	addi	r4,r4,8224
    2c48:	01400034 	movhi	r5,0
    2c4c:	29480804 	addi	r5,r5,8224
    2c50:	01800034 	movhi	r6,0
    2c54:	31880804 	addi	r6,r6,8224
    2c58:	0002bfc0 	call	2bfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2c5c:	01000034 	movhi	r4,0
    2c60:	210bc204 	addi	r4,r4,12040
    2c64:	01400034 	movhi	r5,0
    2c68:	294bc204 	addi	r5,r5,12040
    2c6c:	01800034 	movhi	r6,0
    2c70:	318c0204 	addi	r6,r6,12296
    2c74:	0002bfc0 	call	2bfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2c78:	0002ed80 	call	2ed8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2c7c:	dfc00017 	ldw	ra,0(sp)
    2c80:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2c84:	0002edc1 	jmpi	2edc <alt_icache_flush_all>

00002c88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2c88:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2c8c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2c90:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2c94:	0002e840 	call	2e84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2c98:	0002e800 	call	2e80 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2c9c:	d1200717 	ldw	r4,-32740(gp)
    2ca0:	d1600817 	ldw	r5,-32736(gp)
    2ca4:	d1a00917 	ldw	r6,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2ca8:	dfc00017 	ldw	ra,0(sp)
    2cac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2cb0:	000205c1 	jmpi	205c <main>

00002cb4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2cb4:	defff804 	addi	sp,sp,-32
    2cb8:	dfc00415 	stw	ra,16(sp)
    2cbc:	dc800315 	stw	r18,12(sp)
    2cc0:	dc400215 	stw	r17,8(sp)
    2cc4:	dc000115 	stw	r16,4(sp)
    2cc8:	d9400515 	stw	r5,20(sp)
    2ccc:	d9800615 	stw	r6,24(sp)
    2cd0:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    2cd4:	d8800504 	addi	r2,sp,20
    2cd8:	2025883a 	mov	r18,r4
    2cdc:	d8800015 	stw	r2,0(sp)
    2ce0:	00003d06 	br	2dd8 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2ce4:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2ce8:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2cec:	18800226 	beq	r3,r2,2cf8 <alt_printf+0x44>
        {
            alt_putchar(c);
    2cf0:	1809883a 	mov	r4,r3
    2cf4:	00000a06 	br	2d20 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2cf8:	91000007 	ldb	r4,0(r18)
    2cfc:	94800044 	addi	r18,r18,1
    2d00:	20003726 	beq	r4,zero,2de0 <alt_printf+0x12c>
            {
                if (c == '%')
    2d04:	20c00626 	beq	r4,r3,2d20 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2d08:	008018c4 	movi	r2,99
    2d0c:	2080061e 	bne	r4,r2,2d28 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    2d10:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    2d14:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2d18:	10800104 	addi	r2,r2,4
    2d1c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    2d20:	0002df80 	call	2df8 <alt_putchar>
    2d24:	00002c06 	br	2dd8 <alt_printf+0x124>
                }
                else if (c == 'x')
    2d28:	00801e04 	movi	r2,120
    2d2c:	20801e1e 	bne	r4,r2,2da8 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    2d30:	d8800017 	ldw	r2,0(sp)
    2d34:	14400017 	ldw	r17,0(r2)
    2d38:	10800104 	addi	r2,r2,4
    2d3c:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2d40:	88000226 	beq	r17,zero,2d4c <alt_printf+0x98>
    2d44:	04000704 	movi	r16,28
    2d48:	00000306 	br	2d58 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    2d4c:	01000c04 	movi	r4,48
    2d50:	003ff306 	br	2d20 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    2d54:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2d58:	008003c4 	movi	r2,15
    2d5c:	1404983a 	sll	r2,r2,r16
    2d60:	8884703a 	and	r2,r17,r2
    2d64:	103ffb26 	beq	r2,zero,2d54 <alt_printf+0xa0>
    2d68:	00000b06 	br	2d98 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2d6c:	8884703a 	and	r2,r17,r2
    2d70:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    2d74:	00800244 	movi	r2,9
                            c = '0' + digit;
    2d78:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    2d7c:	10c0012e 	bgeu	r2,r3,2d84 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    2d80:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    2d84:	21003fcc 	andi	r4,r4,255
    2d88:	2100201c 	xori	r4,r4,128
    2d8c:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2d90:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    2d94:	0002df80 	call	2df8 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2d98:	008003c4 	movi	r2,15
    2d9c:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2da0:	803ff20e 	bge	r16,zero,2d6c <alt_printf+0xb8>
    2da4:	00000c06 	br	2dd8 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2da8:	00801cc4 	movi	r2,115
    2dac:	20800a1e 	bne	r4,r2,2dd8 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    2db0:	d8800017 	ldw	r2,0(sp)
    2db4:	14000017 	ldw	r16,0(r2)
    2db8:	10800104 	addi	r2,r2,4
    2dbc:	d8800015 	stw	r2,0(sp)
    2dc0:	00000106 	br	2dc8 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    2dc4:	0002df80 	call	2df8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2dc8:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    2dcc:	84000044 	addi	r16,r16,1
    2dd0:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2dd4:	103ffb1e 	bne	r2,zero,2dc4 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2dd8:	90c00007 	ldb	r3,0(r18)
    2ddc:	183fc11e 	bne	r3,zero,2ce4 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    2de0:	dfc00417 	ldw	ra,16(sp)
    2de4:	dc800317 	ldw	r18,12(sp)
    2de8:	dc400217 	ldw	r17,8(sp)
    2dec:	dc000117 	ldw	r16,4(sp)
    2df0:	dec00804 	addi	sp,sp,32
    2df4:	f800283a 	ret

00002df8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2df8:	defffd04 	addi	sp,sp,-12
    2dfc:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2e00:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2e04:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2e08:	01800044 	movi	r6,1
    2e0c:	01000034 	movhi	r4,0
    2e10:	210c0204 	addi	r4,r4,12296
    2e14:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2e18:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2e1c:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2e20:	0002ea40 	call	2ea4 <altera_avalon_jtag_uart_write>
    2e24:	1009883a 	mov	r4,r2
    2e28:	00bfffc4 	movi	r2,-1
    2e2c:	2080011e 	bne	r4,r2,2e34 <alt_putchar+0x3c>
    2e30:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    2e34:	8005883a 	mov	r2,r16
    2e38:	dfc00217 	ldw	ra,8(sp)
    2e3c:	dc000117 	ldw	r16,4(sp)
    2e40:	dec00304 	addi	sp,sp,12
    2e44:	f800283a 	ret

00002e48 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2e48:	defffe04 	addi	sp,sp,-8
    2e4c:	dc000015 	stw	r16,0(sp)
    2e50:	dfc00115 	stw	ra,4(sp)
    2e54:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2e58:	0002ee80 	call	2ee8 <strlen>
    2e5c:	800b883a 	mov	r5,r16
    2e60:	100d883a 	mov	r6,r2
    2e64:	01000034 	movhi	r4,0
    2e68:	210c0204 	addi	r4,r4,12296
    2e6c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    2e70:	dfc00117 	ldw	ra,4(sp)
    2e74:	dc000017 	ldw	r16,0(sp)
    2e78:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2e7c:	0002ea41 	jmpi	2ea4 <altera_avalon_jtag_uart_write>

00002e80 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    2e80:	f800283a 	ret

00002e84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2e84:	deffff04 	addi	sp,sp,-4
    2e88:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    2e8c:	0002ee00 	call	2ee0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2e90:	00800044 	movi	r2,1
    2e94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2e98:	dfc00017 	ldw	ra,0(sp)
    2e9c:	dec00104 	addi	sp,sp,4
    2ea0:	f800283a 	ret

00002ea4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2ea4:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    2ea8:	298f883a 	add	r7,r5,r6
    2eac:	20c00104 	addi	r3,r4,4
    2eb0:	00000606 	br	2ecc <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2eb4:	18800037 	ldwio	r2,0(r3)
    2eb8:	10bfffec 	andhi	r2,r2,65535
    2ebc:	10000326 	beq	r2,zero,2ecc <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2ec0:	28800007 	ldb	r2,0(r5)
    2ec4:	29400044 	addi	r5,r5,1
    2ec8:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2ecc:	29fff936 	bltu	r5,r7,2eb4 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    2ed0:	3005883a 	mov	r2,r6
    2ed4:	f800283a 	ret

00002ed8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2ed8:	f800283a 	ret

00002edc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2edc:	f800283a 	ret

00002ee0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2ee0:	000170fa 	wrctl	ienable,zero
}
    2ee4:	f800283a 	ret

00002ee8 <strlen>:
    2ee8:	20800007 	ldb	r2,0(r4)
    2eec:	10000526 	beq	r2,zero,2f04 <strlen+0x1c>
    2ef0:	2007883a 	mov	r3,r4
    2ef4:	18c00044 	addi	r3,r3,1
    2ef8:	18800007 	ldb	r2,0(r3)
    2efc:	103ffd1e 	bne	r2,zero,2ef4 <strlen+0xc>
    2f00:	1905c83a 	sub	r2,r3,r4
    2f04:	f800283a 	ret
